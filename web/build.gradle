apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.moowork.grunt'

war.rootSpec.exclude "logback.xml"

test {
    exclude '**/*IT*'
}

task restAssuredTest(type: Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: "http://localhost:8595/"
    include '**/*IT*'
}

idea {
    module {
        excludeDirs += file('node_modules')
        excludeDirs += file('src/main/webapp/bower_components')
    }
}

grunt {
    colors = true
}

node {
    version = '6.11.3'
    yarnVersion = '1.5.1'
    download = true
    distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
}

if (project.hasProperty('rehabstod.useMinifiedJavaScript')) {
    war {
        webAppDirName = 'build/webapp'
    }
    war.dependsOn grunt_build
} else {
    war.dependsOn grunt_build_no_minify
}

war.dependsOn createVersionPropertyFile

task bowerInstall(type: NodeTask, dependsOn:yarn) {
    script = file('node_modules/bower/bin/bower')
    args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}/caches/bower/cache",
            "--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
            "--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
            'install']
    inputs.files file('bower.json')
    outputs.files file('src/main/webapp/bower_components')
}

grunt_build.dependsOn bowerInstall
grunt_build_no_minify.dependsOn bowerInstall

gretty {
    contextPath = '/'
    logbackConfigFile = "${projectDir}/src/main/resources/logback.xml"

    integrationTestTask = null
    scanInterval = 0
    httpPort = 8595
    debugPort = 5013
    debugSuspend = false
    fastReload = true
    inplaceMode = 'hard'
    enableNaming = true

    jvmArgs = [
               '-Dspring.profiles.active=dev',
               '-Dconfig.file=' + projectDir + '/src/main/resources/dev.properties',
               '-Djavax.xml.transform.TransformerFactory=com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl'
               ]
}

dependencies {

    compile "se.riv.clinicalprocess.healthcond.monitoring:clinicalprocess-healthcond-monitoring-schemas:${internalMonitoringSchemaVersion}"
    compile "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${monitoringSchemaVersion}"

    compile "se.inera.intyg.infra:xmldsig:${intygInfraVersion}"

    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jacksonVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonYamlVersion}"
    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"
    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile "org.springframework.ws:spring-ws-core:${springWsCoreVersion}"
    compile "org.springframework:spring-aop:${springContextVersion}"
    compile "wsdl4j:wsdl4j:${wsdl4jVersion}"
    compile "javax.ws.rs:javax.ws.rs-api:${javaxWsRsApiVersion}"

    compile "io.springfox:springfox-swagger2:${swaggerVersion}"
    compile "io.springfox:springfox-swagger-ui:${swaggerVersion}"

    compile "io.prometheus:simpleclient:${prometheusClientVersion}"
    compile "io.prometheus:simpleclient_common:${prometheusClientVersion}"
    compile "io.prometheus:simpleclient_hotspot:${prometheusClientVersion}"
    compile "io.prometheus:simpleclient_servlet:${prometheusClientVersion}"

    compile "org.aspectj:aspectjweaver:${aspectjWeaverVersion}"

    compile "org.antlr:ST4:${stAntlr4Version}"

    compileOnly "javax.servlet:javax.servlet-api:${javaxServletVersion}"
    compileOnly "jstl:jstl:${jstlVersion}"

    testCompile "nl.jqno.equalsverifier:equalsverifier:${equalsVerifierVersion}"
    testCompile "org.assertj:assertj-core:${assertJVersion}"
    testCompile "com.jayway.restassured:rest-assured:${restAssuredVersion}"
    testCompile "com.jayway.restassured:json-schema-validator:${restAssuredVersion}"
    testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testCompile "org.powermock:powermock-module-junit4:${powermockFullVersion}"
    testCompile "org.powermock:powermock-api-mockito2:${powermockFullVersion}"
    testCompile "org.springframework:spring-test:${springContextVersion}"
}
